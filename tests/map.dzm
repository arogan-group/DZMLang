(define (square-list items)
    (map square items))

(define (sum-odd-squares-redundant tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares 
                  (car tree))
                 (sum-odd-squares 
                  (cdr tree))))))

(define (sum-odd-squares tree)
    (accumulate
        + 0
        (map square
             (filter odd?
                     (for tree)))))

(define the-x (list (list 1 2) (list 3 4)))

(define (square-tree tree)
    (map (lambda (sub-tree)
             (if (list? sub-tree)
                 (square-tree sub-tree)
                 (square sub-tree)))
             tree))