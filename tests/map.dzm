(define (square-list items)
    (map square items))

(define (sum-odd-squares-redundant tree)
  (cond ((null? tree) 0)
        ((not (pair? tree))
         (if (odd? tree) (square tree) 0))
        (else (+ (sum-odd-squares 
                  (car tree))
                 (sum-odd-squares 
                  (cdr tree))))))

(define (sum-odd-squares tree)
    (accumulate
        + 0
        (map square
             (filter odd?
                     (for tree)))))

(define the-x (list (list 1 2) (list 3 4)))

(define (square-tree tree)
    (map (lambda (sub-tree)
             (if (list? sub-tree)
                 (square-tree sub-tree)
                 (square sub-tree)))
             tree))

(define (salary-of-highest-paid-programmer
            records)
        (define (salary r) (cdr r))
        (define (programmer? r) (eq? "programmer" (car r)))
        (accumulate
            max
            0
            (map salary
                 (filter programmer? records))))
             
(define employees (list
                      (list "programmer" 2480)
                      (list "programmer" 560)
                      (list "plumber" 220)))
                  

(define (point x y)
 (let ((x x) 
       (y y)
      )
     
   (define (getx) x)

   (define (gety) y)

   (define (add p) 
    (point 
     (+ x (send 'getx p))
     (+ y (send 'gety p))))

   (define (type-of) 'point)
     
   (define (self message)
     (cond ((eqv? message 'getx) getx)
           ((eqv? message 'gety) gety)
           ((eqv? message 'add)  add)
           ((eqv? message 'type-of) type-of)
	   (else (error "Undefined message" message))))
     
   self))